# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# 定义 Changelog 文件的头部内容
# changelog header
header = """
# 更新日志\n
所有显著的变化将记录在此文件中。请参阅 [常规提交](https://www.conventionalcommits.org/) 规范以了解提交指南。\n"""

# 定义 Changelog 正文的模板，使用 Tera 模板语言
# https://keats.github.io/tera/docs/#introduction
body = """
---
{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}]($REPO/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        - **({{commit.scope}})**{% if commit.breaking %} [**breaking**]{% endif %} \
            {{ commit.message|trim }} - ([{{ commit.id | truncate(length=7, end="") }}]($REPO/commit/{{ commit.id }})) - {{ commit.author.name }}
    {%- endfor -%}
    {% raw %}\n{% endraw %}\
    {%- for commit in commits %}
        {%- if commit.scope -%}
        {% else -%}
            - {% if commit.breaking %} [**breaking**]{% endif %}\
                {{ commit.message|trim }} - ([{{ commit.id | truncate(length=7, end="") }}]($REPO/commit/{{ commit.id }})) - {{ commit.author.name }}
        {% endif -%}
    {% endfor -%}
{% endfor %}\n
"""
# 定义 Changelog 文件的尾部内容 template for the changelog footer
footer = """
<!-- 由 git-cliff 生成 generated by git-cliff -->
"""
# 移除模板字符串首尾的空白字符 remove the leading and trailing whitespace from the templates
trim = true
# 定义 postprocessors，用于替换模板中的变量或模式
postprocessors = [
    { pattern = '\$REPO', replace = "" }, # 替换 $REPO 为实际的仓库地址
]

[git]
# 是否解析遵循 conventional commits 规范的提交 parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# 是否过滤掉非 conventional commits 规范的提交 filter out the commits that are not conventional
filter_unconventional = false
# 是否将每个提交的每个正文行作为单独的提交处理 process each line of a commit as an individual commit
split_commits = false
# 提交消息的预处理正则表达式列表 regex for preprocessing the commit messages
commit_preprocessors = [
    # { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/orhun/git-cliff/issues/${2}))"}, # 替换 Issue 编号为链接形式
]
# 解析和分组提交的正则表达式列表 regex for parsing and grouping commits
commit_parsers = [
    { message = "\\[skip", skip = true },
    { message = "\\p{Han}", skip = true },
    { message = "^feat", group = "Features" },
    { message = "^fix", group = "Bug Fixes" },
    { message = "^doc", group = "Documentation" },
    { message = "^perf", group = "Performance" },
    { message = "^refactor", group = "Refactoring" },
    { message = "^style", group = "Style" },
    { message = "^revert", group = "Revert" },
    { message = "^test", group = "Tests" },
    { message = "^chore\\(version\\):", skip = true },
    { message = "^chore", group = "Miscellaneous Chores" },
    { message = ".*", group = "Other" },
    { body = ".*security", group = "Security" },
]
# 是否保护破坏性更改不被跳过 protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# 是否过滤掉不符合 commit parsers 的提交 filter out the commits that are not matched by commit parsers
filter_commits = false
# 匹配 git 标签的正则表达式 regex for matching git tags
tag_pattern = "v[0-9].*"
# 跳过匹配的标签 regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# 忽略匹配的标签 regex for ignoring tags
ignore_tags = ""
# 是否按照拓扑排序排序标签 sort the tags topologically
topo_order = false
# 小节内提交的排序方式，"oldest" 或 "newest" sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# 限制在 Changelog 中包含的提交数量 limit the number of commits included in the changelog.
# limit_commits = 42
